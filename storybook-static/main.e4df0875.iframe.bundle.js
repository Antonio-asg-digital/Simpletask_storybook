(self.webpackChunktaskbox=self.webpackChunktaskbox||[]).push([[792],{"./.storybook/preview.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>_storybook_preview});var angular=__webpack_require__("./node_modules/@storybook/addon-docs/angular/index.js");const documentation_namespaceObject=JSON.parse('{"pipes":[],"interfaces":[{"name":"Task","id":"interface-Task-2b379b7ae56e01348a2f3512c2d8c866a275c4a9370871415230e323261e053b765daa6362d4364eb5981c2ba57ce870e5c30fad406368a3caffa4050fbfbb49","file":"src/app/models/task.model.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"export type TaskState = \'TASK_INBOX\' | \'TASK_PINNED\' | \'TASK_ARCHIVED\';\\r\\n\\r\\nexport interface Task {\\r\\n  id: string;\\r\\n  title: string;\\r\\n  state: TaskState;\\r\\n}\\r\\n","properties":[{"name":"id","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":4},{"name":"state","deprecated":false,"deprecationMessage":"","type":"TaskState","optional":false,"description":"","line":6},{"name":"title","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":5}],"indexSignatures":[],"kind":171,"methods":[],"extends":[]},{"name":"TaskStateModel","id":"interface-TaskStateModel-54b47acd0c5858e4db9a080cc7cebc7e2b8406f0aa0cc5fdc196c7707b9dac844a2c8e718145fbc42b5bfd597a40b6fa62f973daeb6641bc1c645d9695c770fe","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { State, Selector, Action, StateContext } from \'@ngxs/store\';\\r\\nimport { patch, updateItem } from \'@ngxs/store/operators\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n\\r\\n// Defines the actions available to the app\\r\\nexport const actions = {\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n};\\r\\n\\r\\nexport class ArchiveTask {\\r\\n  static readonly type = actions.ARCHIVE_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\nexport class PinTask {\\r\\n  static readonly type = actions.PIN_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\n// The initial state of our store when the app loads.\\r\\n// Usually you would fetch this from a server\\r\\nconst defaultTasks: Task[] = [\\r\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n];\\r\\n\\r\\nexport interface TaskStateModel {\\r\\n  tasks: Task[];\\r\\n  status: \'idle\' | \'loading\' | \'success\' | \'error\';\\r\\n  error: boolean;\\r\\n}\\r\\n\\r\\n// Sets the default state\\r\\n@State<TaskStateModel>({\\r\\n  name: \'taskbox\',\\r\\n  defaults: {\\r\\n    tasks: defaultTasks,\\r\\n    status: \'idle\',\\r\\n    error: false,\\r\\n  },\\r\\n})\\r\\n@Injectable()\\r\\nexport class TasksState {\\r\\n  // Defines a new selector for the error field\\r\\n  @Selector()\\r\\n  static getError(state: TaskStateModel): boolean {\\r\\n    return state.error;\\r\\n  }\\r\\n\\r\\n  @Selector()\\r\\n  static getAllTasks(state: TaskStateModel): Task[] {\\r\\n    return state.tasks;\\r\\n  }\\r\\n\\r\\n  // Triggers the PinTask action, similar to redux\\r\\n  @Action(PinTask)\\r\\n  pinTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: PinTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_PINNED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (pinnedTask) => pinnedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n  // Triggers the archiveTask action, similar to redux\\r\\n  @Action(ArchiveTask)\\r\\n  archiveTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: ArchiveTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_ARCHIVED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (archivedTask) => archivedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n}","properties":[{"name":"error","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"","line":37},{"name":"status","deprecated":false,"deprecationMessage":"","type":"\\"idle\\" | \\"loading\\" | \\"success\\" | \\"error\\"","optional":false,"description":"","line":36},{"name":"tasks","deprecated":false,"deprecationMessage":"","type":"Task[]","optional":false,"description":"","line":35}],"indexSignatures":[],"kind":171,"methods":[],"extends":[]},{"name":"User","id":"interface-User-dcc5c3137cd472dd0002d85b562efd23162e3eff53ca4438a6251e6c46e3b8299076255380d1d42f386510cb6f2cbaab49fa5b5f253be459cdc3869428c5c400","file":"src/stories/User.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"export interface User {}\\r\\n","properties":[],"indexSignatures":[],"methods":[],"extends":[]}],"injectables":[{"name":"TasksState","id":"injectable-TasksState-54b47acd0c5858e4db9a080cc7cebc7e2b8406f0aa0cc5fdc196c7707b9dac844a2c8e718145fbc42b5bfd597a40b6fa62f973daeb6641bc1c645d9695c770fe","file":"src/app/state/task.state.ts","properties":[],"methods":[{"name":"archiveTask","args":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":""},{"type":"ArchiveTask","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":87,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Action","stringifiedArguments":"ArchiveTask"}],"modifierKind":[170],"jsdoctags":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"type":"ArchiveTask","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getAllTasks","args":[{"name":"state","type":"TaskStateModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Task[]","typeParameters":[],"line":58,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Selector","stringifiedArguments":""}],"modifierKind":[170,126],"jsdoctags":[{"name":"state","type":"TaskStateModel","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getError","args":[{"name":"state","type":"TaskStateModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":53,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Selector","stringifiedArguments":""}],"modifierKind":[170,126],"jsdoctags":[{"name":"state","type":"TaskStateModel","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"pinTask","args":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":""},{"type":"PinTask","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":64,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Action","stringifiedArguments":"PinTask"}],"modifierKind":[170],"jsdoctags":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"type":"PinTask","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { State, Selector, Action, StateContext } from \'@ngxs/store\';\\r\\nimport { patch, updateItem } from \'@ngxs/store/operators\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n\\r\\n// Defines the actions available to the app\\r\\nexport const actions = {\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n};\\r\\n\\r\\nexport class ArchiveTask {\\r\\n  static readonly type = actions.ARCHIVE_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\nexport class PinTask {\\r\\n  static readonly type = actions.PIN_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\n// The initial state of our store when the app loads.\\r\\n// Usually you would fetch this from a server\\r\\nconst defaultTasks: Task[] = [\\r\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n];\\r\\n\\r\\nexport interface TaskStateModel {\\r\\n  tasks: Task[];\\r\\n  status: \'idle\' | \'loading\' | \'success\' | \'error\';\\r\\n  error: boolean;\\r\\n}\\r\\n\\r\\n// Sets the default state\\r\\n@State<TaskStateModel>({\\r\\n  name: \'taskbox\',\\r\\n  defaults: {\\r\\n    tasks: defaultTasks,\\r\\n    status: \'idle\',\\r\\n    error: false,\\r\\n  },\\r\\n})\\r\\n@Injectable()\\r\\nexport class TasksState {\\r\\n  // Defines a new selector for the error field\\r\\n  @Selector()\\r\\n  static getError(state: TaskStateModel): boolean {\\r\\n    return state.error;\\r\\n  }\\r\\n\\r\\n  @Selector()\\r\\n  static getAllTasks(state: TaskStateModel): Task[] {\\r\\n    return state.tasks;\\r\\n  }\\r\\n\\r\\n  // Triggers the PinTask action, similar to redux\\r\\n  @Action(PinTask)\\r\\n  pinTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: PinTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_PINNED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (pinnedTask) => pinnedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n  // Triggers the archiveTask action, similar to redux\\r\\n  @Action(ArchiveTask)\\r\\n  archiveTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: ArchiveTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_ARCHIVED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (archivedTask) => archivedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n}","extends":[],"type":"injectable"}],"guards":[],"interceptors":[],"classes":[{"name":"ArchiveTask","id":"class-ArchiveTask-54b47acd0c5858e4db9a080cc7cebc7e2b8406f0aa0cc5fdc196c7707b9dac844a2c8e718145fbc42b5bfd597a40b6fa62f973daeb6641bc1c645d9695c770fe","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { State, Selector, Action, StateContext } from \'@ngxs/store\';\\r\\nimport { patch, updateItem } from \'@ngxs/store/operators\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n\\r\\n// Defines the actions available to the app\\r\\nexport const actions = {\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n};\\r\\n\\r\\nexport class ArchiveTask {\\r\\n  static readonly type = actions.ARCHIVE_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\nexport class PinTask {\\r\\n  static readonly type = actions.PIN_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\n// The initial state of our store when the app loads.\\r\\n// Usually you would fetch this from a server\\r\\nconst defaultTasks: Task[] = [\\r\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n];\\r\\n\\r\\nexport interface TaskStateModel {\\r\\n  tasks: Task[];\\r\\n  status: \'idle\' | \'loading\' | \'success\' | \'error\';\\r\\n  error: boolean;\\r\\n}\\r\\n\\r\\n// Sets the default state\\r\\n@State<TaskStateModel>({\\r\\n  name: \'taskbox\',\\r\\n  defaults: {\\r\\n    tasks: defaultTasks,\\r\\n    status: \'idle\',\\r\\n    error: false,\\r\\n  },\\r\\n})\\r\\n@Injectable()\\r\\nexport class TasksState {\\r\\n  // Defines a new selector for the error field\\r\\n  @Selector()\\r\\n  static getError(state: TaskStateModel): boolean {\\r\\n    return state.error;\\r\\n  }\\r\\n\\r\\n  @Selector()\\r\\n  static getAllTasks(state: TaskStateModel): Task[] {\\r\\n    return state.tasks;\\r\\n  }\\r\\n\\r\\n  // Triggers the PinTask action, similar to redux\\r\\n  @Action(PinTask)\\r\\n  pinTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: PinTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_PINNED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (pinnedTask) => pinnedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n  // Triggers the archiveTask action, similar to redux\\r\\n  @Action(ArchiveTask)\\r\\n  archiveTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: ArchiveTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_ARCHIVED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (archivedTask) => archivedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n}","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"payload","type":"string","deprecated":false,"deprecationMessage":""}],"line":14,"jsdoctags":[{"name":"payload","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"inputsClass":[],"outputsClass":[],"properties":[{"name":"payload","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":16,"modifierKind":[125]},{"name":"type","defaultValue":"actions.ARCHIVE_TASK","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":14,"modifierKind":[126,148]}],"methods":[],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]},{"name":"PinTask","id":"class-PinTask-54b47acd0c5858e4db9a080cc7cebc7e2b8406f0aa0cc5fdc196c7707b9dac844a2c8e718145fbc42b5bfd597a40b6fa62f973daeb6641bc1c645d9695c770fe","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { State, Selector, Action, StateContext } from \'@ngxs/store\';\\r\\nimport { patch, updateItem } from \'@ngxs/store/operators\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n\\r\\n// Defines the actions available to the app\\r\\nexport const actions = {\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n};\\r\\n\\r\\nexport class ArchiveTask {\\r\\n  static readonly type = actions.ARCHIVE_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\nexport class PinTask {\\r\\n  static readonly type = actions.PIN_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\n// The initial state of our store when the app loads.\\r\\n// Usually you would fetch this from a server\\r\\nconst defaultTasks: Task[] = [\\r\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n];\\r\\n\\r\\nexport interface TaskStateModel {\\r\\n  tasks: Task[];\\r\\n  status: \'idle\' | \'loading\' | \'success\' | \'error\';\\r\\n  error: boolean;\\r\\n}\\r\\n\\r\\n// Sets the default state\\r\\n@State<TaskStateModel>({\\r\\n  name: \'taskbox\',\\r\\n  defaults: {\\r\\n    tasks: defaultTasks,\\r\\n    status: \'idle\',\\r\\n    error: false,\\r\\n  },\\r\\n})\\r\\n@Injectable()\\r\\nexport class TasksState {\\r\\n  // Defines a new selector for the error field\\r\\n  @Selector()\\r\\n  static getError(state: TaskStateModel): boolean {\\r\\n    return state.error;\\r\\n  }\\r\\n\\r\\n  @Selector()\\r\\n  static getAllTasks(state: TaskStateModel): Task[] {\\r\\n    return state.tasks;\\r\\n  }\\r\\n\\r\\n  // Triggers the PinTask action, similar to redux\\r\\n  @Action(PinTask)\\r\\n  pinTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: PinTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_PINNED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (pinnedTask) => pinnedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n  // Triggers the archiveTask action, similar to redux\\r\\n  @Action(ArchiveTask)\\r\\n  archiveTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: ArchiveTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_ARCHIVED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (archivedTask) => archivedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n}","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"payload","type":"string","deprecated":false,"deprecationMessage":""}],"line":20,"jsdoctags":[{"name":"payload","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"inputsClass":[],"outputsClass":[],"properties":[{"name":"payload","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":22,"modifierKind":[125]},{"name":"type","defaultValue":"actions.PIN_TASK","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":20,"modifierKind":[126,148]}],"methods":[],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]}],"directives":[],"components":[{"name":"AppComponent","id":"component-AppComponent-901fd0bc09860036bc47c70a2bc9e22cac45d707d2295aa92699b5470ceae13f28a44df23d26141413d8afcca3b6ef3874cbb7ce13869f5a9a044970daa90aa8","file":"src/app/app.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":[],"styles":[],"template":"<app-inbox-screen></app-inbox-screen>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"title","defaultValue":"\'taskbox\'","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":11}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-root\',\\r\\n template: `\\r\\n   <app-inbox-screen></app-inbox-screen>\\r\\n `,\\r\\n})\\r\\nexport class AppComponent {\\r\\n  title = \'taskbox\';\\r\\n}","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[]},{"name":"InboxScreenComponent","id":"component-InboxScreenComponent-994fd5c33d16f88ba47f530e0e0639a4390b98989104c57552eea4049e805e56cab3216cbf9735a670459fa3e76017a42f45e160a1686e1faf56c584c91e3b9a","file":"src/app/components/inbox-screen.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-inbox-screen","styleUrls":[],"styles":[],"template":"<app-pure-inbox-screen [error]=\\"error$ | async\\"></app-pure-inbox-screen>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"error$","deprecated":false,"deprecationMessage":"","type":"Observable<boolean>","optional":false,"description":"","line":13}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\r\\nimport { Store } from \'@ngxs/store\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-inbox-screen\',\\r\\n  template: `\\r\\n    <app-pure-inbox-screen [error]=\\"error$ | async\\"></app-pure-inbox-screen>\\r\\n  `,\\r\\n})\\r\\nexport default class InboxScreenComponent {\\r\\n  error$: Observable<boolean>;\\r\\n  constructor(private store: Store) {\\r\\n    this.error$ = store.select((state) => state.taskbox.error);\\r\\n  }\\r\\n}","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"store","type":"Store","deprecated":false,"deprecationMessage":""}],"line":13,"jsdoctags":[{"name":"store","type":"Store","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[]},{"name":"PureInboxScreenComponent","id":"component-PureInboxScreenComponent-cee918efeaf45f99ca4629f56f00dd3b7c8fc40ca815eee8b72a5e77002a592eb71f95ba880450d5e2ebcd5346336be7696cde78ed777cc603b191b9ede2dd86","file":"src/app/components/pure-inbox-screen.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-pure-inbox-screen","styleUrls":[],"styles":[],"template":"<div *ngIf=\\"error\\" class=\\"page lists-show\\">\\n  <div class=\\"wrapper-message\\">\\n    <span class=\\"icon-face-sad\\"></span>\\n    <p class=\\"title-message\\">Oh no!</p>\\n    <p class=\\"subtitle-message\\">Something went wrong</p>\\n  </div>\\n</div>\\n\\n<div *ngIf=\\"!error\\" class=\\"page lists-show\\">\\n  <nav>\\n    <h1 class=\\"title-page\\">Taskbox</h1>\\n  </nav>\\n  <app-task-list></app-task-list>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"error","deprecated":false,"deprecationMessage":"","line":24,"type":"any","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-pure-inbox-screen\',\\r\\n  template: `\\r\\n    <div *ngIf=\\"error\\" class=\\"page lists-show\\">\\r\\n      <div class=\\"wrapper-message\\">\\r\\n        <span class=\\"icon-face-sad\\"></span>\\r\\n        <p class=\\"title-message\\">Oh no!</p>\\r\\n        <p class=\\"subtitle-message\\">Something went wrong</p>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div *ngIf=\\"!error\\" class=\\"page lists-show\\">\\r\\n      <nav>\\r\\n        <h1 class=\\"title-page\\">Taskbox</h1>\\r\\n      </nav>\\r\\n      <app-task-list></app-task-list>\\r\\n    </div>\\r\\n  `,\\r\\n})\\r\\nexport default class PureInboxScreenComponent {\\r\\n  @Input() error: any;\\r\\n}","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[]},{"name":"PureTaskListComponent","id":"component-PureTaskListComponent-41bcebd3ff0f72ad3ef92b48253e85468b3f105d2b74afa0e2b11d53c7a889c1341468d1d7dc9a761302a66ad06901e319a9fe0e9fd841aa75aec2662a424e2f","file":"src/app/components/pure-task-list.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-pure-task-list","styleUrls":[],"styles":[],"template":"<div class=\\"list-items\\">\\n  <app-task\\n    *ngFor=\\"let task of tasksInOrder\\"\\n    [task]=\\"task\\"\\n    (onArchiveTask)=\\"onArchiveTask.emit($event)\\"\\n    (onPinTask)=\\"onPinTask.emit($event)\\"\\n  >\\n  </app-task>\\n  <div\\n    *ngIf=\\"tasksInOrder.length === 0 && !loading\\"\\n    class=\\"wrapper-message\\"\\n  >\\n    <span class=\\"icon-check\\"></span>\\n    <p class=\\"title-message\\">You have no tasks</p>\\n    <p class=\\"subtitle-message\\">Sit back and relax</p>\\n  </div>\\n  <div *ngIf=\\"loading\\">\\n    <div *ngFor=\\"let i of [1, 2, 3, 4, 5, 6]\\" class=\\"loading-item\\">\\n      <span class=\\"glow-checkbox\\"></span>\\n      <span class=\\"glow-text\\">\\n        <span>Loading</span> <span>cool</span> <span>state</span>\\n      </span>\\n    </div>\\n  </div>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"loading","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":41,"type":"boolean","decorators":[]},{"name":"tasks","deprecated":false,"deprecationMessage":"","line":50,"type":"Task[]","decorators":[]}],"outputsClass":[{"name":"onArchiveTask","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","line":47,"type":"EventEmitter<any>"},{"name":"onPinTask","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","line":44,"type":"EventEmitter<any>"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input, Output, EventEmitter } from \'@angular/core\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n@Component({\\r\\n selector: \'app-pure-task-list\',\\r\\n  template: `\\r\\n    <div class=\\"list-items\\">\\r\\n      <app-task\\r\\n        *ngFor=\\"let task of tasksInOrder\\"\\r\\n        [task]=\\"task\\"\\r\\n        (onArchiveTask)=\\"onArchiveTask.emit($event)\\"\\r\\n        (onPinTask)=\\"onPinTask.emit($event)\\"\\r\\n      >\\r\\n      </app-task>\\r\\n      <div\\r\\n        *ngIf=\\"tasksInOrder.length === 0 && !loading\\"\\r\\n        class=\\"wrapper-message\\"\\r\\n      >\\r\\n        <span class=\\"icon-check\\"></span>\\r\\n        <p class=\\"title-message\\">You have no tasks</p>\\r\\n        <p class=\\"subtitle-message\\">Sit back and relax</p>\\r\\n      </div>\\r\\n      <div *ngIf=\\"loading\\">\\r\\n        <div *ngFor=\\"let i of [1, 2, 3, 4, 5, 6]\\" class=\\"loading-item\\">\\r\\n          <span class=\\"glow-checkbox\\"></span>\\r\\n          <span class=\\"glow-text\\">\\r\\n            <span>Loading</span> <span>cool</span> <span>state</span>\\r\\n          </span>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  `,\\r\\n})\\r\\n export default class PureTaskListComponent {\\r\\n    /**\\r\\n     * @ignore\\r\\n     * Component property to define ordering of tasks\\r\\n    */\\r\\n    tasksInOrder: Task[] = [];\\r\\n\\r\\n    @Input() loading = false;\\r\\n\\r\\n    // tslint:disable-next-line: no-output-on-prefix\\r\\n    @Output() onPinTask: EventEmitter<any> = new EventEmitter();\\r\\n\\r\\n    // tslint:disable-next-line: no-output-on-prefix\\r\\n    @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\\r\\n\\r\\n    @Input()\\r\\n    set tasks(arr: Task[]) {\\r\\n      const initialTasks = [\\r\\n        ...arr.filter((t) => t.state === \'TASK_PINNED\'),\\r\\n        ...arr.filter((t) => t.state !== \'TASK_PINNED\'),\\r\\n      ];\\r\\n      const filteredTasks = initialTasks.filter(\\r\\n        (t) => t.state === \'TASK_INBOX\' || t.state === \'TASK_PINNED\'\\r\\n      );\\r\\n      this.tasksInOrder = filteredTasks.filter(\\r\\n        (t) => t.state === \'TASK_INBOX\' || t.state === \'TASK_PINNED\'\\r\\n      );\\r\\n    }\\r\\n }","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"accessors":{"tasks":{"name":"tasks","setSignature":{"name":"tasks","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"arr","type":"Task[]","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":50,"jsdoctags":[{"name":"arr","type":"Task[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}}},{"name":"TaskComponent","id":"component-TaskComponent-2883bb1e576d4296f658fea496669b8d5eaae9e38973e633acc9c16d010cb60e7a5399fd884febe2e3b3d68758cd165297068cf0efd5768813a98d582d76aee2","file":"src/app/components/task.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-task","styleUrls":[],"styles":[],"template":"<div class=\\"list-item {{ task?.state }}\\">\\n  <label\\n    [attr.aria-label]=\\"\'archiveTask-\' + task?.id\\"\\n    for=\\"checked-{{ task?.id }}\\"\\n    class=\\"checkbox\\"\\n  >\\n    <input\\n      type=\\"checkbox\\"\\n      disabled=\\"true\\"\\n      [defaultChecked]=\\"task?.state === \'TASK_ARCHIVED\'\\"\\n      name=\\"checked-{{ task?.id }}\\"\\n      id=\\"checked-{{ task?.id }}\\"\\n    />\\n    <span class=\\"checkbox-custom\\" (click)=\\"onArchive(task?.id)\\"></span>\\n  </label>\\n  <label\\n    [attr.aria-label]=\\"task?.title + \'\'\\"\\n    for=\\"title-{{ task?.id }}\\"\\n    class=\\"title\\"\\n  >\\n    <input\\n      type=\\"text\\"\\n      [value]=\\"task?.title\\"\\n      readonly=\\"true\\"\\n      id=\\"title-{{ task?.id }}\\"\\n      name=\\"title-{{ task?.id }}\\"\\n      placeholder=\\"Input title\\"\\n    />\\n  </label>\\n  <button\\n    *ngIf=\\"task?.state !== \'TASK_ARCHIVED\'\\"\\n    class=\\"pin-button\\"\\n    [attr.aria-label]=\\"\'pinTask-\' + task?.id\\"\\n    (click)=\\"onPin(task?.id)\\"\\n  >\\n    <span class=\\"icon-star\\"></span>\\n  </button>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"task","deprecated":false,"deprecationMessage":"","line":48,"type":"Task","decorators":[]}],"outputsClass":[{"name":"onArchiveTask","defaultValue":"new EventEmitter<string>()","deprecated":false,"deprecationMessage":"","line":51,"type":"EventEmitter"},{"name":"onPinTask","defaultValue":"new EventEmitter<string>()","deprecated":false,"deprecationMessage":"","line":50,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[{"name":"onArchive","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":57,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onPin","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":53,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input, Output, EventEmitter } from \'@angular/core\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-task\',\\r\\n  template: `\\r\\n    <div class=\\"list-item {{ task?.state }}\\">\\r\\n      <label\\r\\n        [attr.aria-label]=\\"\'archiveTask-\' + task?.id\\"\\r\\n        for=\\"checked-{{ task?.id }}\\"\\r\\n        class=\\"checkbox\\"\\r\\n      >\\r\\n        <input\\r\\n          type=\\"checkbox\\"\\r\\n          disabled=\\"true\\"\\r\\n          [defaultChecked]=\\"task?.state === \'TASK_ARCHIVED\'\\"\\r\\n          name=\\"checked-{{ task?.id }}\\"\\r\\n          id=\\"checked-{{ task?.id }}\\"\\r\\n        />\\r\\n        <span class=\\"checkbox-custom\\" (click)=\\"onArchive(task?.id)\\"></span>\\r\\n      </label>\\r\\n      <label\\r\\n        [attr.aria-label]=\\"task?.title + \'\'\\"\\r\\n        for=\\"title-{{ task?.id }}\\"\\r\\n        class=\\"title\\"\\r\\n      >\\r\\n        <input\\r\\n          type=\\"text\\"\\r\\n          [value]=\\"task?.title\\"\\r\\n          readonly=\\"true\\"\\r\\n          id=\\"title-{{ task?.id }}\\"\\r\\n          name=\\"title-{{ task?.id }}\\"\\r\\n          placeholder=\\"Input title\\"\\r\\n        />\\r\\n      </label>\\r\\n      <button\\r\\n        *ngIf=\\"task?.state !== \'TASK_ARCHIVED\'\\"\\r\\n        class=\\"pin-button\\"\\r\\n        [attr.aria-label]=\\"\'pinTask-\' + task?.id\\"\\r\\n        (click)=\\"onPin(task?.id)\\"\\r\\n      >\\r\\n        <span class=\\"icon-star\\"></span>\\r\\n      </button>\\r\\n    </div>\\r\\n  `,\\r\\n})\\r\\nexport default class TaskComponent {\\r\\n  @Input() task?: Task;\\r\\n\\r\\n  @Output() onPinTask = new EventEmitter<string>();\\r\\n  @Output() onArchiveTask = new EventEmitter<string>();\\r\\n\\r\\n  onPin(id: string) {\\r\\n    this.onPinTask.emit(id);\\r\\n  }\\r\\n\\r\\n  onArchive(id: string) {\\r\\n    this.onArchiveTask.emit(id);\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[]},{"name":"TaskListComponent","id":"component-TaskListComponent-00a40fb7904bb991eb6d2e19d6dd3f1473acfe70e623318b4a46a908a4cc7579d87455cbd5680b76b5d098856a6c05d5ed64dad6197d45b7c4181b88a539ab20","file":"src/app/components/task-list.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-task-list","styleUrls":[],"styles":[],"template":"<app-pure-task-list\\n  [tasks]=\\"tasks$ | async\\"\\n  (onArchiveTask)=\\"archiveTask($event)\\"\\n  (onPinTask)=\\"pinTask($event)\\"\\n></app-pure-task-list>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"tasks$","deprecated":false,"deprecationMessage":"","type":"Observable<any>","optional":true,"description":"","line":18}],"methodsClass":[{"name":"archiveTask","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":27,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nComponent method to trigger the archiveTask event\\n","description":"<p>Component method to trigger the archiveTask event</p>\\n","jsdoctags":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"pinTask","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":34,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nComponent method to trigger the pinTask event\\n","description":"<p>Component method to trigger the pinTask event</p>\\n","jsdoctags":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\r\\nimport { Store } from \'@ngxs/store\';\\r\\nimport { ArchiveTask, PinTask } from \'../state/task.state\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-task-list\',\\r\\n  template: `\\r\\n    <app-pure-task-list\\r\\n      [tasks]=\\"tasks$ | async\\"\\r\\n      (onArchiveTask)=\\"archiveTask($event)\\"\\r\\n      (onPinTask)=\\"pinTask($event)\\"\\r\\n    ></app-pure-task-list>\\r\\n  `,\\r\\n})\\r\\nexport default class TaskListComponent {\\r\\n  tasks$?: Observable<any>;\\r\\n\\r\\n  constructor(private store: Store) {\\r\\n     this.tasks$ = store.select((state) => state.taskbox.tasks);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Component method to trigger the archiveTask event\\r\\n   */\\r\\n  archiveTask(id: string) {\\r\\n    this.store.dispatch(new ArchiveTask(id));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Component method to trigger the pinTask event\\r\\n   */\\r\\n  pinTask(id: string) {\\r\\n    this.store.dispatch(new PinTask(id));\\r\\n  }\\r\\n}","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"store","type":"Store","deprecated":false,"deprecationMessage":""}],"line":18,"jsdoctags":[{"name":"store","type":"Store","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[]}],"modules":[{"name":"AppModule","id":"module-AppModule-4ace7b397ab4492152b3d0aee469a279bce81856273c035349790743d69823cdc02ae3dd0545d4f723e04814d8d7c116bc983ec1a7a8cd1a568475c6f43f27a6","description":"","deprecationMessage":"","deprecated":false,"file":"src/app/app.module.ts","methods":[],"sourceCode":"\\r\\nimport { BrowserModule } from \'@angular/platform-browser\';\\r\\nimport { NgModule } from \'@angular/core\';\\r\\nimport { TaskModule } from \'./components/task.module\';\\r\\nimport { NgxsModule } from \'@ngxs/store\';\\r\\nimport { NgxsReduxDevtoolsPluginModule } from \'@ngxs/devtools-plugin\';\\r\\nimport { NgxsLoggerPluginModule } from \'@ngxs/logger-plugin\';\\r\\n\\r\\nimport { environment } from \'../environments/environment\';\\r\\nimport { AppComponent } from \'./app.component\';\\r\\n\\r\\n import InboxScreenComponent from \'./components/inbox-screen.component\';\\r\\n import PureInboxScreenComponent from \'./components/pure-inbox-screen.component\';\\r\\n\\r\\n@NgModule({\\r\\n declarations: [AppComponent, InboxScreenComponent, PureInboxScreenComponent],\\r\\n  imports: [\\r\\n    BrowserModule,\\r\\n    TaskModule,\\r\\n    NgxsModule.forRoot([], { developmentMode: !environment.production, }),\\r\\n    NgxsReduxDevtoolsPluginModule.forRoot(),\\r\\n    NgxsLoggerPluginModule.forRoot({ disabled: environment.production, }),\\r\\n  ],\\r\\n  providers: [],\\r\\n  bootstrap: [AppComponent],\\r\\n})\\r\\nexport class AppModule {}","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"AppComponent"},{"name":"InboxScreenComponent"},{"name":"PureInboxScreenComponent"}]},{"type":"imports","elements":[{"name":"TaskModule"}]},{"type":"exports","elements":[]},{"type":"bootstrap","elements":[{"name":"AppComponent"}]},{"type":"classes","elements":[]}]},{"name":"TaskModule","id":"module-TaskModule-4eda7e1dfdb3fe6b80dc7b09052a08c426ff158784caf5f7c170887bb49b6df5bd628f896201debf291f55097b678fc85d83263bdd1ddee6793f25129617251a","description":"","deprecationMessage":"","deprecated":false,"file":"src/app/components/task.module.ts","methods":[],"sourceCode":"\\r\\nimport { NgModule } from \'@angular/core\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { NgxsModule } from \'@ngxs/store\';\\r\\n\\r\\nimport TaskComponent from \'./task.component\';\\r\\nimport TaskListComponent from \'./task-list.component\';\\r\\nimport { TasksState } from \'../state/task.state\';\\r\\nimport PureTaskListComponent from \'./pure-task-list.component\';\\r\\n\\r\\n@NgModule({\\r\\n  imports: [CommonModule, NgxsModule.forFeature([TasksState])],\\r\\n  exports: [TaskComponent, TaskListComponent],\\r\\n  declarations: [TaskComponent, TaskListComponent, PureTaskListComponent],\\r\\n  providers: [],\\r\\n})\\r\\nexport class TaskModule {}","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"PureTaskListComponent"},{"name":"TaskComponent"},{"name":"TaskListComponent"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"TaskComponent"},{"name":"TaskListComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]}],"miscellaneous":{"variables":[{"name":"actions","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n}"},{"name":"Archived","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    task: {\\r\\n      id: \'2\',\\r\\n      title: \'Archived Task\',\\r\\n      state: \'TASK_ARCHIVED\',\\r\\n    },\\r\\n  },\\r\\n}"},{"name":"config","ctype":"miscellaneous","subtype":"variable","file":"src/main.ts","deprecated":false,"deprecationMessage":"","type":"StorybookConfig","defaultValue":"{\\r\\n stories: [\'../src/app/components/**/*.stories.@(ts|mdx)\'],\\r\\n  addons: [\\r\\n    \'@storybook/addon-links\',\\r\\n    \'@storybook/addon-essentials\',\\r\\n    \'@storybook/addon-interactions\',\\r\\n    \'@storybook/addon-actions\'\\r\\n  ],\\r\\n  framework: {\\r\\n    name: \'@storybook/angular\',\\r\\n    options: {},\\r\\n  },\\r\\n  docs: {\\r\\n    autodocs: \'tag\',\\r\\n  },\\r\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    tasks: [\\r\\n      { id: \'1\', title: \'Task 1\', state: \'TASK_INBOX\' },\\r\\n      { id: \'2\', title: \'Task 2\', state: \'TASK_INBOX\' },\\r\\n      { id: \'3\', title: \'Task 3\', state: \'TASK_INBOX\' },\\r\\n      { id: \'4\', title: \'Task 4\', state: \'TASK_INBOX\' },\\r\\n      { id: \'5\', title: \'Task 5\', state: \'TASK_INBOX\' },\\r\\n      { id: \'6\', title: \'Task 6\', state: \'TASK_INBOX\' },\\r\\n    ],\\r\\n  },\\r\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    task: {\\r\\n      id: \'1\',\\r\\n      title: \'Task 1\',\\r\\n      state: \'TASK_INBOX\',\\r\\n    },\\r\\n  },\\r\\n}"},{"name":"defaultTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"Task[]","defaultValue":"[\\r\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n]"},{"name":"Empty","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    tasks: [], // Empty task array\\r\\n    loading: false, // Set loading state to false\\r\\n  },\\r\\n}"},{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.prod.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\r\\n  production: true,\\r\\n}"},{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\r\\n  production: false,\\r\\n}"},{"name":"Error","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    error: true,\\r\\n  },\\r\\n}"},{"name":"Loading","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    tasks: [], // Empty task array\\r\\n    loading: true, // Set loading state to true\\r\\n  },\\r\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<PureInboxScreenComponent>","defaultValue":"{\\r\\n  component: PureInboxScreenComponent,\\r\\n  title: \'PureInboxScreen\',\\r\\n  tags: [\'autodocs\'],\\r\\n  decorators: [\\r\\n    moduleMetadata({\\r\\n      imports: [CommonModule, TaskModule],\\r\\n    }),\\r\\n   applicationConfig({\\r\\n     providers: [Store, importProvidersFrom(NgxsModule.forRoot([TasksState]))],\\r\\n    }),\\r\\n  ],\\r\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<PureTaskListComponent>","defaultValue":"{\\r\\n  title: \'PureTaskList\', // Title of the story in the Storybook sidebar\\r\\n  component: PureTaskListComponent, // The component being documented\\r\\n  tags: [\'autodocs\'], // Tags to categorize the story\\r\\n  decorators: [\\r\\n    moduleMetadata({\\r\\n      // Metadata for the Angular module\\r\\n      declarations: [PureTaskListComponent, TaskComponent], // Declare the components used in the story\\r\\n      imports: [CommonModule], // Import necessary Angular modules\\r\\n    }),\\r\\n    componentWrapperDecorator(\\r\\n      // Wraps each story with a custom decorator to add styling\\r\\n      (story) => `<div style=\\"margin: 3em\\">${story}</div>`\\r\\n    ),\\r\\n  ],\\r\\n  argTypes: {\\r\\n    // Defines the types and actions for component arguments\\r\\n    onPinTask: { action: \'pinTask\' }, // Action to handle pinning tasks\\r\\n    onArchiveTask: { action: \'archiveTask\' }, // Action to handle archiving tasks\\r\\n    tasks: { control: \'object\' }, // Control for the \'tasks\' argument to allow editing in the Storybook UI\\r\\n  },\\r\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TaskComponent>","defaultValue":"{\\r\\n  component: TaskComponent,\\r\\n  title: \'Task\',\\r\\n  tags: [\'autodocs\'],\\r\\n  render: (args) => ({\\r\\n    props: {\\r\\n      ...args,\\r\\n      onPinTask: () => {},\\r\\n      onArchiveTask: () => {},\\r\\n    },\\r\\n    template: `<app-task [task]=\\"task\\" (onPinTask)=\\"onPinTask($event)\\" (onArchiveTask)=\\"onArchiveTask($event)\\"></app-task>`,\\r\\n  }),\\r\\n}"},{"name":"preview","ctype":"miscellaneous","subtype":"variable","file":".storybook/preview.ts","deprecated":false,"deprecationMessage":"","type":"Preview","defaultValue":"{\\r\\n  parameters: {\\r\\n    actions: { argTypesRegex: \\"^on[A-Z].*\\" },\\r\\n    controls: {\\r\\n      matchers: {\\r\\n        color: /(background|color)$/i,\\r\\n        date: /Date$/,\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  render: (args) => ({\\r\\n    // The render function returns the component with its arguments\\r\\n    props: {\\r\\n      ...args,\\r\\n      // Ensure that the action handlers are correctly mapped\\r\\n      onPinTask: action(\'pinTask\'),\\r\\n      onArchiveTask: action(\'archiveTask\'),\\r\\n    },\\r\\n    template: `<app-pure-task-list [tasks]=\\"tasks\\" (onPinTask)=\\"onPinTask($event)\\" (onArchiveTask)=\\"onArchiveTask($event)\\"></app-pure-task-list>`,\\r\\n  }),\\r\\n}"},{"name":"WithPinnedTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    tasks: [\\r\\n      ...(Default.args?.tasks || []), // Spread the default tasks into the array\\r\\n      { id: \'4\', title: \'Task 4 (pinned)\', state: \'TASK_PINNED\' }, // Add a pinned task\\r\\n    ],\\r\\n  },\\r\\n}"}],"functions":[],"typealiases":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<PureInboxScreenComponent>","file":"src/app/components/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<PureTaskListComponent>","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TaskComponent>","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"TaskState","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"TASK_INBOX\\" | \\"TASK_PINNED\\" | \\"TASK_ARCHIVED\\"","file":"src/app/models/task.model.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192}],"enumerations":[],"groupedVariables":{"src/app/state/task.state.ts":[{"name":"actions","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n}"},{"name":"defaultTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"Task[]","defaultValue":"[\\r\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n]"}],"src/app/components/task.stories.ts":[{"name":"Archived","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    task: {\\r\\n      id: \'2\',\\r\\n      title: \'Archived Task\',\\r\\n      state: \'TASK_ARCHIVED\',\\r\\n    },\\r\\n  },\\r\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    task: {\\r\\n      id: \'1\',\\r\\n      title: \'Task 1\',\\r\\n      state: \'TASK_INBOX\',\\r\\n    },\\r\\n  },\\r\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TaskComponent>","defaultValue":"{\\r\\n  component: TaskComponent,\\r\\n  title: \'Task\',\\r\\n  tags: [\'autodocs\'],\\r\\n  render: (args) => ({\\r\\n    props: {\\r\\n      ...args,\\r\\n      onPinTask: () => {},\\r\\n      onArchiveTask: () => {},\\r\\n    },\\r\\n    template: `<app-task [task]=\\"task\\" (onPinTask)=\\"onPinTask($event)\\" (onArchiveTask)=\\"onArchiveTask($event)\\"></app-task>`,\\r\\n  }),\\r\\n}"}],"src/main.ts":[{"name":"config","ctype":"miscellaneous","subtype":"variable","file":"src/main.ts","deprecated":false,"deprecationMessage":"","type":"StorybookConfig","defaultValue":"{\\r\\n stories: [\'../src/app/components/**/*.stories.@(ts|mdx)\'],\\r\\n  addons: [\\r\\n    \'@storybook/addon-links\',\\r\\n    \'@storybook/addon-essentials\',\\r\\n    \'@storybook/addon-interactions\',\\r\\n    \'@storybook/addon-actions\'\\r\\n  ],\\r\\n  framework: {\\r\\n    name: \'@storybook/angular\',\\r\\n    options: {},\\r\\n  },\\r\\n  docs: {\\r\\n    autodocs: \'tag\',\\r\\n  },\\r\\n}"}],"src/app/components/pure-inbox-screen.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{}"},{"name":"Error","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    error: true,\\r\\n  },\\r\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<PureInboxScreenComponent>","defaultValue":"{\\r\\n  component: PureInboxScreenComponent,\\r\\n  title: \'PureInboxScreen\',\\r\\n  tags: [\'autodocs\'],\\r\\n  decorators: [\\r\\n    moduleMetadata({\\r\\n      imports: [CommonModule, TaskModule],\\r\\n    }),\\r\\n   applicationConfig({\\r\\n     providers: [Store, importProvidersFrom(NgxsModule.forRoot([TasksState]))],\\r\\n    }),\\r\\n  ],\\r\\n}"}],"src/app/components/pure-task-list.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    tasks: [\\r\\n      { id: \'1\', title: \'Task 1\', state: \'TASK_INBOX\' },\\r\\n      { id: \'2\', title: \'Task 2\', state: \'TASK_INBOX\' },\\r\\n      { id: \'3\', title: \'Task 3\', state: \'TASK_INBOX\' },\\r\\n      { id: \'4\', title: \'Task 4\', state: \'TASK_INBOX\' },\\r\\n      { id: \'5\', title: \'Task 5\', state: \'TASK_INBOX\' },\\r\\n      { id: \'6\', title: \'Task 6\', state: \'TASK_INBOX\' },\\r\\n    ],\\r\\n  },\\r\\n}"},{"name":"Empty","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    tasks: [], // Empty task array\\r\\n    loading: false, // Set loading state to false\\r\\n  },\\r\\n}"},{"name":"Loading","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    tasks: [], // Empty task array\\r\\n    loading: true, // Set loading state to true\\r\\n  },\\r\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<PureTaskListComponent>","defaultValue":"{\\r\\n  title: \'PureTaskList\', // Title of the story in the Storybook sidebar\\r\\n  component: PureTaskListComponent, // The component being documented\\r\\n  tags: [\'autodocs\'], // Tags to categorize the story\\r\\n  decorators: [\\r\\n    moduleMetadata({\\r\\n      // Metadata for the Angular module\\r\\n      declarations: [PureTaskListComponent, TaskComponent], // Declare the components used in the story\\r\\n      imports: [CommonModule], // Import necessary Angular modules\\r\\n    }),\\r\\n    componentWrapperDecorator(\\r\\n      // Wraps each story with a custom decorator to add styling\\r\\n      (story) => `<div style=\\"margin: 3em\\">${story}</div>`\\r\\n    ),\\r\\n  ],\\r\\n  argTypes: {\\r\\n    // Defines the types and actions for component arguments\\r\\n    onPinTask: { action: \'pinTask\' }, // Action to handle pinning tasks\\r\\n    onArchiveTask: { action: \'archiveTask\' }, // Action to handle archiving tasks\\r\\n    tasks: { control: \'object\' }, // Control for the \'tasks\' argument to allow editing in the Storybook UI\\r\\n  },\\r\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  render: (args) => ({\\r\\n    // The render function returns the component with its arguments\\r\\n    props: {\\r\\n      ...args,\\r\\n      // Ensure that the action handlers are correctly mapped\\r\\n      onPinTask: action(\'pinTask\'),\\r\\n      onArchiveTask: action(\'archiveTask\'),\\r\\n    },\\r\\n    template: `<app-pure-task-list [tasks]=\\"tasks\\" (onPinTask)=\\"onPinTask($event)\\" (onArchiveTask)=\\"onArchiveTask($event)\\"></app-pure-task-list>`,\\r\\n  }),\\r\\n}"},{"name":"WithPinnedTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    tasks: [\\r\\n      ...(Default.args?.tasks || []), // Spread the default tasks into the array\\r\\n      { id: \'4\', title: \'Task 4 (pinned)\', state: \'TASK_PINNED\' }, // Add a pinned task\\r\\n    ],\\r\\n  },\\r\\n}"}],"src/environments/environment.prod.ts":[{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.prod.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\r\\n  production: true,\\r\\n}"}],"src/environments/environment.ts":[{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\r\\n  production: false,\\r\\n}"}],".storybook/preview.ts":[{"name":"preview","ctype":"miscellaneous","subtype":"variable","file":".storybook/preview.ts","deprecated":false,"deprecationMessage":"","type":"Preview","defaultValue":"{\\r\\n  parameters: {\\r\\n    actions: { argTypesRegex: \\"^on[A-Z].*\\" },\\r\\n    controls: {\\r\\n      matchers: {\\r\\n        color: /(background|color)$/i,\\r\\n        date: /Date$/,\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n}"}]},"groupedFunctions":{},"groupedEnumerations":{},"groupedTypeAliases":{"src/app/components/pure-inbox-screen.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<PureInboxScreenComponent>","file":"src/app/components/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"src/app/components/pure-task-list.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<PureTaskListComponent>","file":"src/app/components/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"src/app/components/task.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TaskComponent>","file":"src/app/components/task.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"src/app/models/task.model.ts":[{"name":"TaskState","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"TASK_INBOX\\" | \\"TASK_PINNED\\" | \\"TASK_ARCHIVED\\"","file":"src/app/models/task.model.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192}]}},"routes":[],"coverage":{"count":1,"status":"low","files":[{"filePath":".storybook/preview.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"preview","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/app.component.ts","type":"component","linktype":"component","name":"AppComponent","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"src/app/components/inbox-screen.component.ts","type":"component","linktype":"component","name":"InboxScreenComponent","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"src/app/components/pure-inbox-screen.component.ts","type":"component","linktype":"component","name":"PureInboxScreenComponent","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"src/app/components/pure-inbox-screen.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-inbox-screen.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Error","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-inbox-screen.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-task-list.component.ts","type":"component","linktype":"component","name":"PureTaskListComponent","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"src/app/components/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Empty","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Loading","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithPinnedTasks","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task-list.component.ts","type":"component","linktype":"component","name":"TaskListComponent","coveragePercent":40,"coverageCount":"2/5","status":"medium"},{"filePath":"src/app/components/task.component.ts","type":"component","linktype":"component","name":"TaskComponent","coveragePercent":0,"coverageCount":"0/6","status":"low"},{"filePath":"src/app/components/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Archived","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/models/task.model.ts","type":"interface","linktype":"interface","name":"Task","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"class","linktype":"classe","name":"ArchiveTask","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"class","linktype":"classe","name":"PinTask","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"injectable","linktype":"injectable","name":"TasksState","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"interface","linktype":"interface","name":"TaskStateModel","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"actions","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"defaultTasks","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/environments/environment.prod.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"environment","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/environments/environment.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"environment","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/main.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"config","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/User.ts","type":"interface","linktype":"interface","name":"User","coveragePercent":0,"coverageCount":"0/1","status":"low"}]}}');(0,angular.$)(documentation_namespaceObject);const _storybook_preview={parameters:{actions:{argTypesRegex:"^on[A-Z].*"},controls:{matchers:{color:/(background|color)$/i,date:/Date$/}}}}},"./storybook-config-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";var external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),external_STORYBOOK_MODULE_CHANNELS_=__webpack_require__("storybook/internal/channels"),asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");const pipeline=x=>x(),importers=[function(){var _ref=(0,asyncToGenerator.A)((function*(path){if(!/^\.[\\/](?:src(?:[\\/](?!\.)(?:(?:(?!(?:^|[\\/])\.).)*?)[\\/]|[\\/]|$)(?!\.)(?=.)[^\\/]*?\.mdx)$/.exec(path))return;const pathRemainder=path.substring(6);return __webpack_require__("./src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:[\\\\/]src(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.mdx)$")("./"+pathRemainder)}));return function(_x){return _ref.apply(this,arguments)}}(),function(){var _ref2=(0,asyncToGenerator.A)((function*(path){if(!/^\.[\\/](?:src(?:[\\/](?!\.)(?:(?:(?!(?:^|[\\/])\.).)*?)[\\/]|[\\/]|$)(?!\.)(?=.)[^\\/]*?\.stories\.(js|jsx|ts|tsx))$/.exec(path))return;const pathRemainder=path.substring(6);return __webpack_require__("./src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:[\\\\/]src(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$")("./"+pathRemainder)}));return function(_x2){return _ref2.apply(this,arguments)}}()];function _importFn(){return(_importFn=(0,asyncToGenerator.A)((function*(path){for(let i=0;i<importers.length;i++){const moduleExports=yield pipeline((()=>importers[i](path)));if(moduleExports)return moduleExports}}))).apply(this,arguments)}const channel=(0,external_STORYBOOK_MODULE_CHANNELS_.createBrowserChannel)({page:"preview"});external_STORYBOOK_MODULE_PREVIEW_API_.addons.setChannel(channel),"DEVELOPMENT"===external_STORYBOOK_MODULE_GLOBAL_.global.CONFIG_TYPE&&(window.__STORYBOOK_SERVER_CHANNEL__=channel);const preview=new external_STORYBOOK_MODULE_PREVIEW_API_.PreviewWeb((function importFn(_x3){return _importFn.apply(this,arguments)}),(()=>(0,external_STORYBOOK_MODULE_PREVIEW_API_.composeConfigs)([__webpack_require__("./node_modules/@storybook/angular/dist/client/preview-prod.js"),__webpack_require__("./node_modules/@storybook/angular/dist/client/docs/config.js"),__webpack_require__("./node_modules/@storybook/angular/dist/client/config.js"),__webpack_require__("./node_modules/@storybook/addon-links/dist/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/docs/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/actions/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/backgrounds/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/viewport/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/measure/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/outline/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/highlight/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-interactions/dist/preview.mjs"),__webpack_require__("./.storybook/preview.ts")])));window.__STORYBOOK_PREVIEW__=preview,window.__STORYBOOK_STORY_STORE__=preview.storyStore,window.__STORYBOOK_ADDONS_CHANNEL__=channel},"./node_modules/@storybook/instrumenter/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/instrumenter/dist sync recursive",module.exports=webpackEmptyContext},"./node_modules/memoizerific sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/memoizerific sync recursive",module.exports=webpackEmptyContext},"./src/styles.css?ngGlobalStyle":()=>{},"./src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:[\\\\/]src(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.mdx)$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./stories/Introduction.mdx":["./src/stories/Introduction.mdx",170,861]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}));var ids=map[req],id=ids[0];return Promise.all(ids.slice(1).map(__webpack_require__.e)).then((()=>__webpack_require__(id)))}webpackAsyncContext.keys=()=>Object.keys(map),webpackAsyncContext.id="./src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:[\\\\/]src(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.mdx)$",module.exports=webpackAsyncContext},"./src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:[\\\\/]src(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./app/components/pure-inbox-screen.stories":["./src/app/components/pure-inbox-screen.stories.ts",989,612],"./app/components/pure-inbox-screen.stories.ts":["./src/app/components/pure-inbox-screen.stories.ts",989,612],"./app/components/pure-task-list.stories":["./src/app/components/pure-task-list.stories.ts",811],"./app/components/pure-task-list.stories.ts":["./src/app/components/pure-task-list.stories.ts",811],"./app/components/task.stories":["./src/app/components/task.stories.ts",285],"./app/components/task.stories.ts":["./src/app/components/task.stories.ts",285]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}));var ids=map[req],id=ids[0];return Promise.all(ids.slice(1).map(__webpack_require__.e)).then((()=>__webpack_require__(id)))}webpackAsyncContext.keys=()=>Object.keys(map),webpackAsyncContext.id="./src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:[\\\\/]src(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$",module.exports=webpackAsyncContext},"storybook/internal/channels":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CHANNELS__},"storybook/internal/client-logger":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CLIENT_LOGGER__},"storybook/internal/preview-errors":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS__},"storybook/internal/core-events":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS__},"@storybook/global":module=>{"use strict";module.exports=__STORYBOOK_MODULE_GLOBAL__},"storybook/internal/preview-api":module=>{"use strict";module.exports=__STORYBOOK_MODULE_PREVIEW_API__}},__webpack_require__=>{var __webpack_exec__=moduleId=>__webpack_require__(__webpack_require__.s=moduleId);__webpack_require__.O(0,[652],(()=>(__webpack_exec__("./storybook-config-entry.js"),__webpack_exec__("./node_modules/zone.js/fesm2015/zone.js"),__webpack_exec__("./node_modules/@angular/compiler/fesm2022/compiler.mjs"),__webpack_exec__("./src/styles.css?ngGlobalStyle"))));__webpack_require__.O()}]);